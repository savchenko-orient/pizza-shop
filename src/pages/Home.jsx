import React from 'react'
import qs from 'qs';
import { useNavigate } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';

import PizzaBlock from '../components/PizzaBlock';
import Categories from '../components/Categiries';
import Sort from '../components/Sort';
import Pagination from '../components/Pagination';

import { selectSearchValue, setCategory, setCurrentPage, setFilters, selectFilter } from '../redux/slices/filterSlice';
import { sortCategories } from './../components/Sort';
import { fetchPizzas, selectPizza } from '../redux/slices/pizzaSlice';

export default function Home({ onAddToCart }) {
    const categories = ['–í—Å—ñ', "–ú'—è—Å–Ω—ñ", '–í–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω—Å—å–∫—ñ', '–ì—Ä–∏–ª—å', '–ì–æ—Å—Ç—Ä—ñ', '–ó–∞–∫—Ä–∏—Ç—ñ',];

    const navigate = useNavigate();
    const dispatch = useDispatch();

    const isSearch = React.useRef(false);
    const isMounted = React.useRef(false);

    const searchValue = useSelector(selectSearchValue);
    const { category, sort, currentPage } = useSelector(selectFilter);
    const { items, status } = useSelector(selectPizza);

    const onClickCategory = (id) => {
        dispatch(setCategory(id));
    };
    const onChangePage = (number) => {
        dispatch(setCurrentPage(number))
    }
    const getPizzas = async () => {
        const sortBy = sort.sortProperty.replace('-', '');
        const order = sort.sortProperty.includes('-') ? 'desc' : 'asc';
        // asc(ASCending) - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, desc(DESCending) - –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        // const search = searchValue ? `&search=${searchValue}` : '';

        dispatch(
            fetchPizzas({
                sortBy,
                order,
                category,
                currentPage
            }));
        window.scrollTo(0, 0);
    };


    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
    React.useEffect(() => {
        if (isMounted.current) {
            const queryString = qs.stringify({
                sortProperty: sort.sortProperty,
                category,
                currentPage
            });

            navigate(`?${queryString}`);
        }

        isMounted.current = true;
    }, [category, sort.sortProperty, currentPage])

    // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ REDUX
    React.useEffect(() => {
        if (window.location.search) {
            const params = qs.parse(window.location.search.substring(1));
            const sort = sortCategories.find((obj) => obj.sortProperty === params.sortProperty);

            dispatch(
                setFilters({
                    ...params,
                    sort
                })
            );
            isSearch.current = true;
        }
    }, [])

    // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä–± —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã
    React.useEffect(() => {
        getPizzas();

    }, [category, sort, currentPage]);

    const filtredItems = items.filter(item =>
        item.title.toLowerCase().includes(searchValue.toLowerCase())
    );

    return (
        <div className="container">
            <div className="content__top">
                <Categories
                    categories={categories}
                    value={category}
                    onClickCategory={onClickCategory}
                />
                <Sort />
            </div>
            <h2 className="content__title">{categories[category]}</h2>
            {status === 'error' ? (
                <div className="content__error-info">
                    <h1 >–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞üòï</h1>
                    <p>–ù–∞–∂–∞–ª—å, –Ω–∞–º –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ—Ü–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ.</p>
                </div>
            ) : (
                <div className="content__items">
                    {(status === 'loading' ? [...Array(12)] : filtredItems).map((item, index) => {
                        return (
                            <PizzaBlock
                                key={index}
                                onPlus={(obj) => onAddToCart(obj)}
                                {...item}
                            />
                        )
                    })}
                </div>
            )}

            <Pagination currentPage={currentPage} onChangePage={onChangePage} />
        </div>
    )
}





